{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Entypo } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar HomeScreen = function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  return _jsx(Stack.Navigator, {\n    children: _jsx(Stack.Screen, {\n      name: \"Home\",\n      component: HomeScreenContent,\n      options: {\n        headerTitle: function headerTitle() {\n          return _jsxs(View, {\n            style: {\n              flexDirection: 'row',\n              alignItems: 'center'\n            },\n            children: [_jsx(Image, {\n              source: require(\"../assets/logo.png\"),\n              style: {\n                width: 50,\n                height: 50,\n                marginRight: 10\n              }\n            }), _jsx(Text, {\n              style: {\n                fontSize: 20\n              },\n              children: \"ENTE NADU\"\n            })]\n          });\n        },\n        headerTitleAlign: 'center',\n        headerRight: function headerRight() {\n          return _jsx(TouchableOpacity, {\n            style: {\n              marginRight: 10\n            },\n            onPress: function onPress() {\n              return alert('Header Button Pressed');\n            }\n          });\n        },\n        headerLeft: function headerLeft() {\n          return _jsx(TouchableOpacity, {\n            style: {\n              marginLeft: 10\n            },\n            onPress: function onPress() {\n              return alert('Menu Icon Pressed');\n            },\n            children: _jsx(Entypo, {\n              name: \"menu\",\n              size: 24,\n              color: \"black\"\n            })\n          });\n        }\n      }\n    })\n  });\n};\nvar HomeScreenContent = function HomeScreenContent() {\n  var buttons = generateButtons(6, 130);\n  var randomWords = generateRandomWords(6);\n  return _jsx(ImageBackground, {\n    source: require(\"../assets/abc.png\"),\n    style: styles.backgroundImage,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.message,\n        children: \"Home Screen\"\n      }), buttons.map(function (button, index) {\n        return _jsx(TouchableOpacity, {\n          style: [styles.roundButton, {\n            top: button.top,\n            left: button.left\n          }],\n          onPress: function onPress() {\n            return alert('Button ${index + 1} (${randomWords[index]}) pressed');\n          },\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: randomWords[index]\n          })\n        }, index);\n      })]\n    })\n  });\n};\nvar generateButtons = function generateButtons(count, radius) {\n  var buttons = [];\n  var angleStep = 2 * Math.PI / count;\n  var centerTop = 250;\n  var centerLeft = 640;\n  for (var i = 0; i < count; i++) {\n    var angle = i * angleStep;\n    var top = Math.sin(angle) * radius + centerTop;\n    var left = Math.cos(angle) * radius + centerLeft;\n    buttons.push({\n      top: top,\n      left: left\n    });\n  }\n  return buttons;\n};\nvar generateRandomWords = function generateRandomWords(count) {\n  var randomWords = ['Home Service', 'Transportation', 'Medical', 'Education', 'Information', 'Shopping'];\n  return randomWords.slice(0, count);\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  message: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n    fontFamily: 'CASTELLAR'\n  },\n  roundButton: {\n    backgroundColor: 'white',\n    width: 70,\n    height: 70,\n    borderRadius: 40,\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'black',\n    textAlign: 'center'\n  },\n  backgroundImage: {\n    flex: 1,\n    resizeMode: 'cover'\n  }\n});\nexport default HomeScreen;","map":{"version":3,"names":["React","View","Text","StyleSheet","TouchableOpacity","ImageBackground","Image","createStackNavigator","Entypo","jsx","_jsx","jsxs","_jsxs","Stack","HomeScreen","_ref","navigation","Navigator","children","Screen","name","component","HomeScreenContent","options","headerTitle","style","flexDirection","alignItems","source","require","width","height","marginRight","fontSize","headerTitleAlign","headerRight","onPress","alert","headerLeft","marginLeft","size","color","buttons","generateButtons","randomWords","generateRandomWords","styles","backgroundImage","container","message","map","button","index","roundButton","top","left","buttonText","count","radius","angleStep","Math","PI","centerTop","centerLeft","i","angle","sin","cos","push","slice","create","flex","justifyContent","padding","fontWeight","fontFamily","backgroundColor","borderRadius","position","textAlign","resizeMode"],"sources":["C:/New folder/vhss-template-main/vhss-template-main/src/HomeScreen.js"],"sourcesContent":["import React from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, ImageBackground, Image } from 'react-native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { Entypo } from '@expo/vector-icons';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst HomeScreen = ({ navigation }) => {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen\r\n        name=\"Home\"\r\n        component={HomeScreenContent}\r\n        options={{\r\n          headerTitle: () => (\r\n            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n              <Image\r\n                source={require('../assets/logo.png')} // Replace with the path to your logo image\r\n                style={{ width: 50, height: 50, marginRight: 10 }}\r\n              />\r\n              <Text style={{ fontSize: 20 }}>ENTE NADU</Text>\r\n            </View>\r\n          ),\r\n          headerTitleAlign: 'center',\r\n          headerRight: () => (\r\n            <TouchableOpacity\r\n              style={{ marginRight: 10 }}\r\n              onPress={() => alert('Header Button Pressed')}>\r\n              {/* You can add an icon or any other component here */}\r\n            </TouchableOpacity>\r\n          ),\r\n          headerLeft: () => (\r\n            <TouchableOpacity\r\n              style={{ marginLeft: 10 }}\r\n              onPress={() => alert('Menu Icon Pressed')}>\r\n              <Entypo name=\"menu\" size={24} color=\"black\" />\r\n            </TouchableOpacity>\r\n          ),\r\n        }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst HomeScreenContent = () => {\r\n  const buttons = generateButtons(6, 130); // Adjust the number of buttons and radius as needed\r\n  const randomWords = generateRandomWords(6); // Generate an array of random words\r\n\r\n  return (\r\n    <ImageBackground\r\n      source={require('../assets/abc.png')} // Replace with the path to your background image\r\n      style={styles.backgroundImage}\r\n    >\r\n      <View style={styles.container}>\r\n        <Text style={styles.message}>Home Screen</Text>\r\n\r\n        {/* Render the generated buttons with random words */}\r\n        {buttons.map((button, index) => (\r\n          <TouchableOpacity\r\n            key={index}\r\n            style={[\r\n              styles.roundButton,\r\n              {\r\n                top: button.top,\r\n                left: button.left,\r\n              },\r\n            ]}\r\n            onPress={() => alert('Button ${index + 1} (${randomWords[index]}) pressed')}\r\n          >\r\n            <Text style={styles.buttonText}>{randomWords[index]}</Text>\r\n          </TouchableOpacity>\r\n        ))}\r\n      </View>\r\n    </ImageBackground>\r\n  );\r\n};\r\n\r\nconst generateButtons = (count, radius) => {\r\n  const buttons = [];\r\n  const angleStep = (2 * Math.PI) / count;\r\n  const centerTop = 250; // Adjust the center position (top) as needed\r\n  const centerLeft = 640; // Adjust the center position (left) as needed\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const angle = i * angleStep;\r\n    const top = Math.sin(angle) * radius + centerTop;\r\n    const left = Math.cos(angle) * radius + centerLeft;\r\n\r\n    buttons.push({ top, left });\r\n  }\r\n\r\n  return buttons;\r\n};\r\n\r\nconst generateRandomWords = (count) => {\r\n  // Replace with your logic to generate random words\r\n  const randomWords = ['Home Service', 'Transportation', 'Medical', 'Education', 'Information', 'Shopping'];\r\n\r\n  return randomWords.slice(0, count);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  message: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: 'white',\r\n    fontFamily: 'CASTELLAR' // Set text color to contrast with the background\r\n  },\r\n  roundButton: {\r\n    backgroundColor: 'white', // Change the color as needed\r\n    width: 70, // Increase the width to make the button larger\r\n    height: 70, // Increase the height to make the button larger\r\n    borderRadius: 40, // Make it a circle by setting borderRadius to half of the width and height\r\n    position: 'absolute', // Position the button absolutely\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  buttonText: {\r\n    color: 'black', // Set text color to contrast with the background\r\n    textAlign: 'center',\r\n  },\r\n  backgroundImage: {\r\n    flex: 1,\r\n    resizeMode: 'cover', // or 'stretch' for a different effect\r\n  },\r\n});\r\n\r\nexport default HomeScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}