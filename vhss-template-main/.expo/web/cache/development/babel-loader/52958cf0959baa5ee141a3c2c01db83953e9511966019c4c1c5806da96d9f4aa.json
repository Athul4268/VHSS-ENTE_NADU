{"ast":null,"code":"import React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThoughtScreen = function ThoughtScreen(_ref) {\n  var navigation = _ref.navigation;\n  useEffect(function () {\n    var onBackPress = function onBackPress() {\n      BackHandler.exitApp();\n      return true;\n    };\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\n    return function () {\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n    };\n  }, []);\n  var handleSkip = function handleSkip() {\n    navigation.navigate('Login');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Thought for the Day\"\n    }), _jsx(Button, {\n      title: \"Skip\",\n      onPress: handleSkip\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default ThoughtScreen;","map":{"version":3,"names":["React","useEffect","View","Text","Button","BackHandler","StyleSheet","jsx","_jsx","jsxs","_jsxs","ThoughtScreen","_ref","navigation","onBackPress","exitApp","addEventListener","removeEventListener","handleSkip","navigate","style","styles","container","children","title","onPress","create","flex","justifyContent","alignItems"],"sources":["C:/New folder/vhss-template-main/vhss-template-main/src/ThoughtScreen.js"],"sourcesContent":["// ThoughtScreen.js\r\nimport React, { useEffect } from 'react';\r\nimport { View, Text, Button, BackHandler, StyleSheet } from 'react-native';\r\n\r\nconst ThoughtScreen = ({ navigation }) => {\r\n  useEffect(() => {\r\n    const onBackPress = () => {\r\n      // Close the app when the back button is pressed\r\n      BackHandler.exitApp();\r\n      return true; // Prevent default behavior (closing the app)\r\n    };\r\n\r\n    // Add event listener for the back button press\r\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n\r\n    // Clean up the event listener when the component is unmounted\r\n    return () => {\r\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\r\n    };\r\n  }, []);\r\n\r\n  const handleSkip = () => {\r\n    // Navigate to the next screen after clicking the skip button.\r\n    // Replace 'Login' with the name of your next screen.\r\n    navigation.navigate('Login');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>Thought for the Day</Text>\r\n      {/* Add your thought content here */}\r\n      <Button title=\"Skip\" onPress={handleSkip} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default ThoughtScreen;\r\n"],"mappings":"AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGzC,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACjCZ,SAAS,CAAC,YAAM;IACd,IAAMa,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;MAExBT,WAAW,CAACU,OAAO,CAAC,CAAC;MACrB,OAAO,IAAI;IACb,CAAC;IAGDV,WAAW,CAACW,gBAAgB,CAAC,mBAAmB,EAAEF,WAAW,CAAC;IAG9D,OAAO,YAAM;MACXT,WAAW,CAACY,mBAAmB,CAAC,mBAAmB,EAAEH,WAAW,CAAC;IACnE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IAGvBL,UAAU,CAACM,QAAQ,CAAC,OAAO,CAAC;EAC9B,CAAC;EAED,OACET,KAAA,CAACR,IAAI;IAACkB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5Bf,IAAA,CAACL,IAAI;MAAAoB,QAAA,EAAC;IAAmB,CAAM,CAAC,EAEhCf,IAAA,CAACJ,MAAM;MAACoB,KAAK,EAAC,MAAM;MAACC,OAAO,EAAEP;IAAW,CAAE,CAAC;EAAA,CACxC,CAAC;AAEX,CAAC;AAED,IAAMG,MAAM,GAAGf,UAAU,CAACoB,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAelB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}